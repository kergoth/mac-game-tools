#!/bin/sh

locate_app_by_id () {
    mdfind "kMDItemContentType == 'com.apple.application-bundle' && kMDItemCFBundleIdentifier == '$*'"
}

locate_app () {
    mdfind "kMDItemContentType == 'com.apple.application-bundle' && kMDItemDisplayName == '${*%.app}'cd"
}

usage () {
    echo >&2 "Usage: ${0##*/} [-t TEMPLATE_PATH] WRAPPER_PATH [WRAPPER_NAME]"
    exit 2
}

process_arguments () {
    template=

    while getopts t:h opt; do
        case "$opt" in
            t)
                template="$OPTARG"
                if [ ! -e "$template" ]; then
                    echo >&2 "Error: template path '$template' does not exist"
                    usage
                fi
                ;;
            h|\?)
                usage
                ;;
        esac
    done
    shift $((OPTIND - 1))

    if [ $# -eq 0 ] || [ $# -gt 2 ]; then
        echo >&2 "Error: incorrect number of arguments"
        usage
    fi

    wrapper_path="$1"
    if [ -e "$wrapper_path" ]; then
        echo >&2 "Error: $wrapper_path already exists"
        exit 1
    fi

    if [ $# -eq 2 ]; then
        wrapper_name="$2"
    else
        wrapper_name="$(basename "$wrapper_path" | sed -e "s/\.app$//")"
    fi
}


set -e

scriptdir="$(cd "$(dirname "$0")" && pwd -P)"
PATH="$scriptdir:$PATH"

process_arguments "$@"

if [ -z "$template" ]; then
    template="$HOME/Applications/Saved/Game Wrapper Tools/Glyph.app"
    # template="$(locate_app_by_id "Steam Template542582350Wine.wineskin.prefs" | head -n 1)"
    # template="$(locate_app "Steam Template.app" | grep -v Backup | head -n 1)"
    # template="$(locate_app_by_id "org.kergoth.gog.Steam Template" | head -n 1)"
    if [ -z "$template" ]; then
        # template="$(locate_app_by_id "Steam Template.Wineskin.prefs" | head -n 1)"
        # if [ -z "$template" ]; then
            echo >&2 "Error: unable to locate 'Glyph.app'"
            exit 2
        # fi
    fi
fi
echo >&2 "Template: $template"
cp -a "$template" "$wrapper_path"
app_set_metadata -n "$wrapper_name" -d "$wrapper_name" -v Glyph -s Glyph -i "org.kergoth.glyph.$(printf "%s" "$wrapper_name" | tr '[:upper:]' '[:lower:]' | tr ' ' '_')" "$wrapper_path"
rm -f "$wrapper_path/Games"
mv "$wrapper_path/Client" "$wrapper_path/Glyph"

cp -a "$(which finalize_wrapper)" "$(which makeicns)" "$wrapper_path/Contents/Resources/"

cat >"$wrapper_path/finalize" <<END
#!/bin/sh
cd "\$(dirname "\$0")"

rm -f Game
ln -s Glyph/Games/*/* Game

case "\$(readlink Game)" in
    Glyph/Games/RIFT/*)
        id=1
        ;;
    Glyph/Games/Defiance/*)
        id=2
        ;;
    Glyph/Games/ArcheAge/*)
        id=3
        ;;
    Glyph/Games/Trove/*)
        id=4
        ;;
    Glyph/Games/Atlas\ Reactor/*)
        id=5
        ;;
    Glyph/Games/Devilian/*)
        id=6
        ;;
    *)
        id="?"
        ;;
esac
/usr/libexec/PlistBuddy -c "Set \"Program Flags\" \"-game \$id\"" Contents/Info.plist

Contents/Resources/finalize_wrapper "\$PWD/\$(readlink Game)" && \
    rm -f finalize Contents/Resources/finalize_* Contents/Resources/makeicns
END
chmod +x "$wrapper_path/finalize"

if which tag >/dev/null 2>&1; then
    tag -a Game "$wrapper_path"
fi
