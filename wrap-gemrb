#!/bin/bash

set -euo pipefail

usage () {
    cat <<END >&2
Usage: ${0##*/} [options] GAME_DIR [DEST_APP]

Options:

  -c             Given the GAME_DIR, heuristically check to see if this script should be used.
  -n             No copy. This disables copying the game dir into the app, so
                 you can make such arrangements yourself, or in a calling script.
  -r REL_PATH    Specify the relative path to the game dir from the
                 Contents/Resources dir in the app. Default: ../../Game.
END
    exit 1
}

process_arguments () {
    check_only=0
    no_copy=0
    rel_path=../../Game

    while getopts cnr:h opt; do
        case "$opt" in
            c)
                check_only=1
                ;;
            n)
                no_copy=1
                ;;
            r)
                rel_path="$OPTARG"
                ;;
            h|\?)
                usage
                ;;
        esac
    done
    shift $((OPTIND - 1))

    if [ $# -eq 0 ] || [ $# -gt 2 ]; then
        echo >&2 "Error: incorrect number of arguments"
        usage
    fi

    gamedir="$(cd "$1" && pwd)"
    if [ $# -gt 1 ]; then
        destdir="${2%.app}.app"
    else
        destdir="${gamedir##*/}.app"
    fi
}

check_supported () {
    if [ $check_only -eq 1 ]; then
        if [ -n "$(find "$gamedir"/ -iname baldur.exe -maxdepth 1)" ] || \
           [ -n "$(find "$gamedir"/ -iname bgmain.exe -maxdepth 1)" ] || \
           [ -n "$(find "$gamedir"/ -iname torment.exe -maxdepth 1)" ]; then
            exit 0
        else
            exit 10
        fi
    fi
}

locate_app_by_id () {
    mdfind "kMDItemContentType == 'com.apple.application-bundle' && kMDItemCFBundleIdentifier == '$*'"
}


process_arguments "$@"
check_supported

gemrb="$(locate_app_by_id "net.sourceforge.gemrb" | sed 's,$,/Contents/MacOS/GemRB,' | nlxargs ls -t | head -n 1 | sed 's,/Contents/MacOS/GemRB,,')"
if [ -z "$gemrb" ]; then
    echo >&2 "Error: unable to locate GemRB, please make it available."
    return 1
fi
gemrb_base="${gemrb##*/}"
echo >&2 "GemRB: $gemrb"

if [ -e "$destdir" ]; then
    echo >&2 "Error: $destdir already exists, aborting"
    exit 2
fi

new-app -f "$destdir"
if [ ! -e "$destdir" ]; then
    mv "$destdir.app" "$destdir"
fi

cp -a "$gemrb" "$destdir/Contents/Resources/"

rm -rf "$destdir/Contents/Resources/game"
if [ $no_copy -eq 0 ]; then
    cp -a "$gamedir" "$destdir/Contents/Resources/game"
    if [ "$rel_path" != "../../Game" ]; then
        echo >&2 "Warning: copying game, ignoring specified rel_path $rel_path"
    fi
    ln -s Contents/Resources/game "$destdir/Game"
else
    ln -s "$rel_path" "$destdir/Contents/Resources/game"
fi

cat <<END >"$destdir/Contents/MacOS/app"
#!/bin/sh
cd "\$(dirname "\$0")/../Resources"
exec "./$gemrb_base/Contents/MacOS/GemRB" game
END
chmod +x "$destdir/Contents/MacOS/app"

game_name="${destdir%.app}"
game_name="${game_name##*/}"
gemrb_version="$(/usr/libexec/PlistBuddy -c 'Print CFBundleShortVersionString' "$gemrb/Contents/Info.plist")"
app_set_metadata -v "GemRB A$gemrb_version" -s "GemRB $gemrb_version" \
                 -n "$game_name" -d "$game_name" \
                 -i "com.kergoth.GemRB.$game_name" "$destdir"

ln -s "Contents/Resources/$gemrb_base" "$destdir/GemRB.app"
