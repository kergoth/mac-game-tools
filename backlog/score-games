#!/bin/bash

set -o pipefail

if [ $# -eq 0 ]; then
    set -- [0-9]*
fi

get_metacritic_scores () {
    local search_query="$1"
    local toml="$2"
    local write=0
    local mc_game
    mc_game="$(toml-get metacritic.game <"$toml" 2>/dev/null)"
    if [ $? -ne 0 ]; then
        platform="$(toml-get metacritic.platform <"$toml" 2>/dev/null)"
        if ! http --check-status --ignore-stdin -h "$base_url/${platform:-pc}/$mc_game" >/dev/null 2>&1; then
            local mc_url
            mc_url="$(critic_search "$search_query" | head -n 1)" || return 1
            if [ -n "$mc_url" ]; then
                mc_game="${mc_url#$base_url/}"
                mc_platform="${mc_game%%/*}"
                mc_game="${mc_game#*/}"
                if [ "$mc_game" = "$mc_url" ]; then
                    echo >&2 "Error: unrecognized metacritic url $mc_url for $mc_game"
                    exit 1
                fi
            fi
        fi
        write=1
    fi

    local score
    score="$(toml-get metacritic.score <"$toml" 2>/dev/null)"
    local user_score
    user_score="$(toml-get metacritic.user_score <"$toml" 2>/dev/null)"
    if [ -z "$score" ] || [ -z "$user_score" ]; then
        write=1
        local scores platform
        platform="$(toml-get metacritic.platform <"$toml" 2>/dev/null)"
        scores="$(critic_scores "$base_url/${platform:-pc}/$mc_game")"
        if [ -z "$scores" ]; then
            score="0"
            user_score="0.0"
        else
            score="$(echo "$scores" | cut -d"	" -f1)"
            user_score="$(echo "$scores" | cut -d"	" -f2)"
            if [ "$score" = "tbd" ]; then
                score="0"
            fi
            if [ "$user_score" = "tbd" ] || [ -z "$user_score" ]; then
                user_score="0.0"
            fi
        fi
    fi

    if [ $write -eq 1 ]; then
        if ! toml-get metacritic <"$toml" >/dev/null 2>&1; then
            echo '[metacritic]' >>"$toml"
        fi
        cat "$toml" | \
            toml-set-string metacritic.game "$mc_game" | \
            toml-set-string metacritic.platform "${mc_platform:-pc}" | \
            toml-set metacritic.score "$score" metacritic.user_score "$user_score" >"$toml.new" && \
            mv "$toml.new" "$toml"
    fi
    printf "%d\t%s\t%d\t%s\n" "$write" "$mc_game" "$score" "$user_score"
}

get_imdb_rating () {
    local search_query="$1"
    local toml="$2"
    local write=0
    local game title_id rating
    rating="$(toml-get imdb.rating <"$toml" 2>/dev/null)"
    if [ -z "$rating" ]; then
        write=1
        local ratings_info
        ratings_info="$("$scriptdir/imdb-game-ratings" "$search_query" 2>/dev/null | head -n 1)"
        if [ $? -eq 0 ]; then
            game="$(echo "$ratings_info" | cut -d"	" -f1)"
            title_id="$(echo "$ratings_info" | cut -d"	" -f2)"
            rating="$(echo "$ratings_info" | cut -d"	" -f3)"
            if [ "$rating" = "-" ]; then
                rating=0
            fi
        else
            # No search results found
            game="##invalid##"
            title_id="##invalid##"
            rating=0
        fi
    else
        game="$(toml-get imdb.game <"$toml" 2>/dev/null)" || return 1
    fi

    if [ $write -eq 1 ]; then
        if ! toml-get imdb <"$toml" >/dev/null 2>&1; then
            echo '[imdb]' >>"$toml"
        fi
        cat "$toml" | \
            toml-set-string imdb.game "$game" | \
            toml-set-string imdb.title "$title_id" | \
            toml-set imdb.rating "$rating" >"$toml.new" && \
            mv "$toml.new" "$toml"
    fi
    printf "%d\t%s\t%s\n" "$write" "$game" "$rating"
}

critic_score () {
    http --check-status --ignore-stdin "$@" | pup '.metascore_anchor .metascore_w span text{}'
}

critic_scores () {
    http --check-status --ignore-stdin "$@" | pup '.metascore_anchor .metascore_w text{}' | tr '\n' '\t'
}

critic_search () {
    metacritic_root="http://www.metacritic.com"
    http --check-status --ignore-stdin "${metacritic_root}/search/game/$*/results" | pup 'a.col_left attr{href}' | sed "s,^,$metacritic_root," | sed -nE -e 's,(/game/pc/[^/]*)/?.*,\1,p'
}


scriptdir="$(dirname "$0")"
quiet=0
while getopts qh opt; do
    case "$opt" in
        q)
            quiet=1
            ;;
        \?|h)
            echo >&2 "Usage: ${0##*/} [-q] PATH [PATH..]"
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))


base_url=http://www.metacritic.com/game

mkdir -p _metadata
tmp="$(mktemp -t "${0##*/}.XXXXX")" || exit 1
trap 'rm -f "$tmp"' EXIT INT TERM
find "$@" -iname \*.app -prune >"$tmp"
len="$(wc -l <"$tmp")"
cat "$tmp" | while read -r game; do
    base="$(basename "$game" | sed 's,\.app$,,')"
    search_query="$(echo "$base" | sed 's,(.*),,g; s,\[.*\],,g; s,^[0-9.]* *- *,,;' | tr -d '[:punct:]' | sed 's,   *, ,g; s, $,,; s,^ ,,;')"
    toml="_metadata/$base.toml"
    touch "$toml"

    results="$(get_metacritic_scores "$search_query" "$toml")"
    write="$(echo "$results" | cut -d"	" -f1)"
    lookup_game="$(echo "$results" | cut -d"	" -f2)"
    scores="$(echo "$results" | cut -d"	" -f3-)"
    if [ "$scores" = "0	0.0" ]; then
        results="$(get_imdb_rating "$search_query" "$toml")"
        write="$(echo "$results" | cut -d"	" -f1)"
        lookup_game="$(echo "$results" | cut -d"	" -f2)"
        scores="$scores	$(echo "$results" | cut -d"	" -f3-)"
    fi

    if [ "${quiet:-0}" -eq 0 ] || [ "${write:-0}" -eq 1 ]; then
        printf "%s\t%s\t%s\n" "$game" "$lookup_game" "$scores"
        if [ "${write:-0}" -eq 1 ] && [ $len -gt 1 ]; then
            sleep 2
        fi
    fi
done
