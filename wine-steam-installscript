#!/usr/bin/env python3
# NOTE: As we're running outside of steam, it's not possible to substitute
# %CDKEY% in any registry entries, so the user may have to set those manually
# after retrieving their cd keys from Steam. Dead Space 2 is an example.

import collections
import os
import re
import shlex
import shutil
import subprocess
import sys
import tempfile

from pathlib import Path

sys.path.insert(0, Path(__file__).parent)

import click
import vdf


MAX_FOLDERS = 10
MAX_PROCS = 10
# directx is rarely a good idea, vcredists usually aren't needed, and when
# they are, they should be winetricks, and dotnet needs winetricks
DEFAULT_BLACKLIST = r'directx|dxsetup|vcredist|msvc'
DEFAULT_WINETRICKS_MAP = r'dotnet.*3\.?5:dotnet35;dotnet.*4\.?0:dotnet40;dotnet.*4\.?5:dotnet45;dotnet.*2\.?0:dotnet20'
WINETRICKS_BROKEN_64 = 'dotnet35'


class VDFDict(vdf.VDFDict):
    """Dict with tweaks for vdf usage."""

    def iget(self, key, default=None):
        """Return a value for the key, ignoring case. Uses the first match."""
        if isinstance(key, str):
            for k in self:
                if isinstance(k, str) and k.lower() == key.lower():
                    return self.get(k, default)
        return self.get(key, default)

    def expanded_get(self, key, context, default=None):
        """Return a value for the key, expanding special values."""
        if isinstance(key, str):
            for k in self:
                if isinstance(k, str) and k.lower() == key.lower():
                    key = k
        value = self.get(key, default)
        if isinstance(value, str):
            for ck in context:
                if f'{ck}' in value:
                    value = value.replace(f'%{ck}%', context[ck])
        return value

    def escaped_get(self, key, context, default=None):
        value = self.expanded_get(key, context, default)
        if isinstance(value, str):
            value = value.replace('\\\\', '\\')
            value = value.replace('\\"', '"')
        return value


class ProcessError(Exception):
    def __init__(self, cmd, error):
        self.cmd = cmd
        self.error = error
        super().__init__()

    def __str__(self):
        if isinstance(self.error, subprocess.CalledProcessError):
            if (not self.error.stderr and not self.error.stdout) or not self.error.returncode or self.error.returncode < 0:
                return str(self.error)
            else:
                return "Command '%s' returned non-zero exit status %d:\n%s\n%s" % (
                    self.cmd, self.error.returncode, self.error.stderr, self.error.stdout.decode('utf-8', errors='replace'))
        else:
            return "Command '%s' failed: %s" % (self.cmd, self.error)


@click.command(context_settings=dict(help_option_names=['-h', '--help']))
@click.option('-b', '--blacklist', help='Regex for processes to exclude from execution. Checked against installscript path, registry runkey, and the process and arguments.', default=DEFAULT_BLACKLIST)
@click.option('-t', '--tricks', help='Map of regex patterns to winetricks to install. Checked against installscript path, registry runkey, and the process and arguments.', default=DEFAULT_WINETRICKS_MAP)
@click.option('-d/-D', '--use-installdir/--no-use-installdir', help='Specify an installdir rather than an appmanifest. In this case all .vdf files in the installdir are processed.')
@click.argument('appmanifest', nargs=1, required=True)
def vdf_run_installscripts(appmanifest, blacklist, tricks, use_installdir):
    if blacklist:
        blacklist = re.compile(blacklist, re.IGNORECASE)
    if tricks:
        tricks = dict(((re.compile(r, re.IGNORECASE), t.split())
                       for r, t in (entry.split(':') for entry in tricks.split(';'))))
    else:
        tricks = {}

    appmanifest = Path(appmanifest).resolve(strict=True)
    if use_installdir:
        installdir = appmanifest
        vdffiles = installdir.rglob('*.vdf')
    else:
        with open(appmanifest, 'r', errors='replace') as f:
            parsed = vdf.load(f, mapper=VDFDict)

        appstate = parsed.iget('appstate')
        scripts = appstate.iget('installscripts')
        if not scripts:
            return

        installdir = appmanifest.parent / \
            'common' / appstate.iget('installdir')
        installdir = installdir.resolve(strict=True)
        vdffiles = [installdir /
                    script.replace('\\\\', '/') for script in scripts]

    proc = wine(['winepath', '-w', str(installdir)])
    winstalldir = proc.stdout.decode('utf-8').strip()

    shellfolders = 'HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders'
    proc = wine(['reg', 'query', shellfolders, '/v', 'Personal', '/f'])
    querylines = proc.stdout.decode('utf-8').splitlines()[2:]
    docs = querylines[0].lstrip().split(maxsplit=2)[2]

    context = {
        'INSTALLDIR': winstalldir,
        'USER_MYDOCS': docs.replace('\\\\', '\\'),
        'windir': 'c:\\windows',
    }

    for vdffile in vdffiles:
        if blacklist and blacklist.search(str(vdffile)):
            click.echo(
                f'Skipping blacklisted installscript by path: {vdffile}')
            continue

        if not vdffile.exists():
            sys.exit(f'Install script {vdffile} does not exist')

        click.echo(f'Processing install script {vdffile}')

        with open(vdffile, 'r', errors='replace') as f:
            parsed = vdf.load(f, mapper=VDFDict)

        inst = parsed.iget('installscript')
        if not inst:
            continue

        rp = inst.iget('run process')
        if rp:
            runprocess(rp, installdir, context, blacklist, tricks)

        reg = inst.iget('registry')
        if reg:
            registry(reg, installdir, context)

        cf = inst.iget('copy folders')
        if cf:
            copyfolders(cf, installdir, context)


def wine(cmd, **kwargs):
    if isinstance(cmd, str):
        cmd = shlex.split(cmd)
    cmd = ['wine'] + cmd
    return run(cmd, **kwargs)


def run(cmd, **kwargs):
    if isinstance(cmd, str):
        cmd = shlex.split(cmd)

    stderr = tempfile.TemporaryFile()
    if 'stderr' not in kwargs:
        kwargs['stderr'] = stderr
    if 'stdout' not in kwargs:
        kwargs['stdout'] = subprocess.PIPE
    if 'stdin' not in kwargs:
        kwargs['stdin'] = subprocess.PIPE
    if 'check' not in kwargs:
        kwargs['check'] = True
    if 'close_fds' not in kwargs:
        kwargs['close_fds'] = True

    strcmd = subprocess.list2cmdline(cmd)
    # click.echo(f'Running command: {strcmd}')
    try:
        return subprocess.run(cmd, **kwargs)
    except subprocess.CalledProcessError as exc:
        stderr.seek(0)
        exc.stderr = stderr.read()
        raise ProcessError(strcmd, exc) from exc
    except OSError as exc:
        raise ProcessError(strcmd, exc) from exc


def registry(reg, installdir, context):
    for key, entry in reg.items():
        ekey = key.replace('\\\\', '\\')
        click.echo(f'Adding registry key {ekey}')
        wine(['reg', 'add', ekey, '/f'])
        for rtype, values in entry.items():
            if isinstance(values, dict):
                rtype = rtype.upper()
                if rtype == 'STRING':
                    rtype = 'REG_SZ'
                elif rtype == 'DWORD':
                    rtype = 'REG_DWORD'
                elif rtype.startswith('REG_'):
                    pass
                else:
                    click.echo(
                        f'Unrecognized registry entry type in vdf: {rtype}')
                    sys.exit(1)
                for value_name, data in values.items():
                    _addreg(rtype, ekey, value_name, data, context)
            else:
                # No type dict, default to a string
                _addreg('REG_SZ', ekey, rtype, values, context)


def _addreg(rtype, ekey, value_name, data, context):
    if isinstance(data, dict):
        click.echo(f'Adding registry key {ekey}\\{value_name}')
        wine(['reg', 'add', ekey + '\\' + value_name, '/f'])
        for key, value in data.items():
            _addreg(rtype, ekey + '\\' + value_name, key, value, context)
    else:
        for c, v in context.items():
            data = data.replace(f'%{c}%', v)
        click.echo(f'Setting registry entry {ekey}\\{value_name} to {data}')
        wine(['reg', 'delete', ekey, '/v', value_name, '/f'], check=False)
        wine(['reg', 'add', ekey, '/v', value_name, '/t', rtype, '/d', data, '/f'])


def copyfolders(reg, installdir, context):
    for _, entry in reg.items():
        for i in range(1, MAX_FOLDERS):
            src = entry.escaped_get(f'SrcFolder {i}', context)
            if not src:
                break
            dest = entry.escaped_get(f'DstFolder {i}', context)
            if dest:
                proc = wine(['winepath', src])
                src = Path(proc.stdout.decode('utf-8').rstrip())
                proc = wine(['winepath', dest])
                dest = Path(proc.stdout.decode('utf-8').rstrip())
                if src.exists() and not dest.exists():
                    click.echo(f'Copying folder from {src} to {dest}')
                    os.makedirs(dest.resolve().parent)
                    shutil.copytree(src, dest, symlinks=True)


def runprocess(rp, installdir, context, blacklist, tricks):
    if isinstance(next(iter(rp.items()))[1], str):
        # Run Process is a single entry, not multiple
        rp = VDFDict({'Run Process': rp})

    for key, entry in rp.items():
        nocleanup = entry.escaped_get('nocleanup', context)
        osreq = entry.escaped_get('requirement_os', context)
        if osreq:
            prefix = Path(os.getenv('WINEPREFIX', Path.home() / '.wine'))
            syswow64 = prefix / 'drive_c' / 'windows' / 'syswow64'
            is64 = osreq.iget('is64bitwindows')
            if is64 == '1' and not syswow64.exists():
                click.echo(
                    f'Skipping run process for {key}: requires 64-bit windows')
                continue
            elif is64 == '0' and syswow64.exists():
                click.echo(
                    f'Skipping run process for {key}: requires 32-bit windows')
                continue

        should_run = True
        hasrunkey = entry.escaped_get('hasrunkey', context)
        if hasrunkey:
            proc = wine(['reg', 'query', hasrunkey, '/v', key], check=False)
            if proc.returncode == 0:
                should_run = False
            if blacklist and blacklist.search(hasrunkey):
                click.echo(
                    f'Skipping blacklisted runprocess {key} for {hasrunkey}')
                continue

        if blacklist and blacklist.search(key):
            click.echo(f'Skipping blacklisted runprocess {key}')
            continue

        if should_run:
            prefix = Path(os.getenv('WINEPREFIX', Path.home() / '.wine'))
            syswow64 = prefix / 'drive_c' / 'windows' / 'syswow64'
            for i in range(1, MAX_PROCS):
                process = entry.escaped_get(f'process {i}', context)
                if not process:
                    break
                command = entry.escaped_get(f'command {i}', context)

                if blacklist and blacklist.search(process):
                    click.echo(
                        f'Skipping blacklisted runprocess {key} for {process}')
                    continue

                for regex, winetricks in tricks.items():
                    if regex.search(process) or (command and regex.search(command)) or (hasrunkey and regex.search(hasrunkey)):
                        if syswow64.exists() and any(t for t in winetricks if t in WINETRICKS_BROKEN_64.split()):
                            continue
                        tricks_to_install = winetricks
                        break
                else:
                    tricks_to_install = None

                if tricks_to_install:
                    # Winetricks manages wineserver itself, drop ours
                    run(['wineserver', '-k'])
                    run(['wineserver', '-w'])
                    cmd = ['winetricks'] + tricks_to_install
                    strcmd = subprocess.list2cmdline(cmd)
                    click.echo(f'Running {strcmd} for process {key}')
                    run(cmd)
                    run(['wineserver', '-p'])
                else:
                    cmd = ['start', '/wait', process]
                    if command:
                        cmd += shlex.split(command)
                    strcmd = subprocess.list2cmdline(cmd)

                    click.echo(f'Running process {key}: {strcmd}')
                    try:
                        wine(cmd)
                    except ProcessError:
                        ignoreexitcode = entry.iget('ignoreexitcode')
                        if ignoreexitcode != '1':
                            raise

            if hasrunkey:
                wine(['reg', 'delete', hasrunkey, '/v', key, '/f'], check=False)
                wine(['reg', 'add', hasrunkey, '/v', key,
                      '/t', 'REG_DWORD', '/d', '1', '/f'])


def run_cmd_main(cmd):
    """Run the click command, showing help rather than usage for an error."""
    try:
        cmd(standalone_mode=False)
    except click.Abort:
        click.echo('Aborted!', file=sys.stderr)
        sys.exit(1)
    except click.UsageError as exc:
        color = None
        if exc.ctx:
            color = exc.ctx.color
            click.echo(exc.ctx.get_help() + '\n', file=sys.stderr, color=color)
        click.echo('Error: %s' % exc.format_message(), file=sys.stderr,
                   color=color)
        sys.exit(exc.exit_code)
    except click.ClickException as exc:
        exc.show()
        sys.exit(exc.exit_code)


if __name__ == '__main__':
    click.echo('Starting wineserver')
    subprocess.run(['wineserver', '-p'])
    try:
        click.echo('Running scripts')
        run_cmd_main(vdf_run_installscripts)
    except ProcessError as exc:
        sys.stderr.write(str(exc) + '\n')
        sys.exit(1)
    finally:
        click.echo('Cleaning up wineserver')
        subprocess.run(['wineserver', '-k'])
        subprocess.run(['wineserver', '-w'])
