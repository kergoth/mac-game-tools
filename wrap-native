#!/bin/bash
#
# TODO: consider symlinking the icon rather than copying

set -e

usage () {
    echo >&2 "${0##*/} [OPTIONS] GAME [GAME_TYPE]"
    echo >&2
    echo >&2 "GAME may be a game .app, if a Game symlink inside it points to"
    echo >&2 "the game data directory, otherwise it must be the path to the"
    echo >&2 "game data directory inside the .app."
    echo >&2
    echo >&2 "GAME_TYPE is optional. Ex 'scummvm', 'dosbox'."
    echo >&2
    echo >&2 "Options:"
    echo >&2
    echo >&2 "  -N NEW_GAME         Specify the name of the new .app"
    echo >&2 "  -s scummvm_game_id  Specify ScummVM game ID for the scummvm type"
    echo >&2 "  -n                  Dry-run. Print what would be done"
    echo >&2 "  -l                  Symlink, don't move the original, and suffix the new wrapper name"
    echo >&2 "  -c                  Copy, don't move the original, and suffix the new wrapper name"
    echo >&2 "  -m                  Move the original (default)"
    echo >&2 "  -f                  Force. If the game is already native, unnative it first"
    echo >&2
    echo >&2 "Ex:"
    echo >&2
    echo >&2 "  ${0##*/} \"Some Game.app\""
    echo >&2 "  ${0##*/} \"Some Game.app/drive_c/Program Files/Some Game\""
    exit 2
}

process_arguments () {
    # flashback is excluded, as REminiscence doesn't handle game controllers
    available_game_types="openmw gemrb openrct2 scummvm boxer-standalone"
    scummvm_game_id=
    new_game=
    dry_run=0
    wrapper_mode=move
    force=0
    while getopts s:N:nlcmfh opt; do
        case "$opt" in
            s)
                scummvm_game_id="$OPTARG"
                ;;
            N)
                new_game="${OPTARG%.app}.app"
                ;;
            n)
                dry_run=1
                ;;
            l)
                wrapper_mode=link
                ;;
            c)
                wrapper_mode=copy
                ;;
            m)
                wrapper_mode=move
                ;;
            f)
                force=1
                ;;
            \?|h)
                usage
                ;;
        esac
    done
    shift $((OPTIND - 1))

    if [ $# -lt 1 ] || [ $# -gt 2 ]; then
        usage
    fi

    game="${1%/}"
    game_type="$2"
    game_base="${game##*/}"

    if [ -e "$game/Contents/Resources/$game_base" ]; then
        if [ $wrapper_mode = move ]; then
            if [ $force -eq 1 ]; then
                unnative "$game"
            else
                echo >&2 "Error: $game is already wrapped native"
                exit 1
            fi
        else
            game="$game/Contents/Resources/$game_base"
        fi
    fi

    case "$game" in
        *.app)
            _game="$game"
            if [ -e "$game/Contents/MacOS/GOGLauncher" ]; then
                wrapped_game="$(find "$game/Contents/Resources/game" -type d -maxdepth 1 -mindepth 1)"
                if [ -n "$wrapped_game" ]; then
                    _game="$wrapped_game"
                fi
            fi

            if [ -d "$_game/Game" ]; then
                game_dir="$_game/$(readlink "$_game/Game")"
            else
                echo >&2 "Warning: Game symlink does not exist or is invalid, attempting automatic"
                game_dir="$_game/$(get-gamedir "$_game")"
                if [ -z "$game_dir" ]; then
                    usage
                fi
            fi
            ;;
        *.app/*)
            game_dir="$game"
            game="${game%.app/*}.app"
            game_base="${game##*/}"
            ;;
        *)
            usage
            ;;
    esac
    game_dir="$(cd "$game_dir" && pwd -P)"
    game_name="${game_base%.app}"
}

game_type_from_dir () {
    local game_type

    for check_type in $available_game_types; do
        if external_wrapper_check "$check_type"; then
            game_type="$check_type"
            break
        fi
    done

    echo "$game_type"
}

external_wrapper_check () {
    evalf 'wrap-%s -c "%s"' "$1" "$game_dir" >/dev/null
}

create_wrapper () {
    destdir="$1"
    shift
    evalf 'wrap-%s -n %s "%s" "%s"' "$game_type" "$*" "$game_dir" "$destdir"
    wrap_app "$game" "$destdir" -V
    app_set_metadata -i "com.kergoth.wrapped.$game_type.$(adjust_identifier "$game_name")" "$destdir"
}

evalf () {
    fmt="$1"
    shift
    # printf >&2 "evalf: $fmt\n" "$@"
    # eval echo >&2 "evalf: $(printf "$fmt" "$@")"
    eval "$(printf "$fmt" "$@")"
}

wrap_app () {
    from="$1"
    to="$2"
    shift 2

    case $wrapper_mode in
        link)
            wrap-app -n "$@" "$from" "$to"
            ln -s "$(cd "$from" && pwd -P)" "$to/Contents/Resources/"
            ;;
        copy)
            wrap-app -n "$@" "$from" "$to"
            cp -a "$from" "$to/Contents/Resources/"
            ;;
        move)
            wrap-app "$@" "$from" "$to"
            ;;
    esac

    # Sanity check
    if [ ! -e "$destdir/Contents/Resources/$game_base" ]; then
        echo >&2 "Game doesn't exist in $destdir, aborting"
        exit 2
    fi
}

# Replace supplementary app symlinks with wrappers
create_extra_app_wrappers () {
    find "$1" -type l -mindepth 1 -maxdepth 1 -iname \*.app | grep -v Wineskin | \
        while read extra_app; do
            extra_app="${extra_app#$1/}"
            new_app="$1/${extra_app%.app}.new.app"
            new-app -V GOG -I "org.kergoth.wrapper.$(adjust_identifier "${extra_app%.app}")" "${new_app%.app}"
            cat >"$new_app/Contents/MacOS/app" <<END
#!/bin/sh

(
    tempdir="\$(mktemp -d -t "\${0##*/}.XXXXXX")"
    trap 'rm -rf "\$tempdir"' EXIT INT TERM
    wrapperdir="\$(cd "\$(dirname "\$0")/../../.." && pwd)"
    ln -s "\$wrapperdir/Contents/Resources/$game_base" "\$tempdir/"
    open -W "\$tempdir/$game_base/$extra_app" --args "\$@"
) &
END
            chmod +x "$new_app/Contents/MacOS/app"
            copymacicon "$1/$extra_app" "$new_app"
            rm -f "$1/$extra_app"
            mv "$new_app" "$1/$extra_app"
        done

    new_app="$1/${game_base%.app} (Original).app"
    new-app "${new_app%.app}"
    wrap-app -n -r "../../../Contents/Resources/$game_base" "$1/Contents/Resources/$game_base" "$new_app"
    cat >"$new_app/Contents/MacOS/app" <<END
#!/bin/sh

(
    tempdir="\$(mktemp -d -t "\${0##*/}.XXXXXX")"
    trap 'rm -rf "\$tempdir"' EXIT INT TERM
    wrapperdir="\$(cd "\$(dirname "\$0")/../../.." && pwd)"
    ln -s "\$wrapperdir/Contents/Resources/$game_base" "\$tempdir/"
    open -W "\$tempdir/$game_base" --args "\$@"
) &
END
    chmod +x "$new_app/Contents/MacOS/app"
    copymacicon "$1/Contents/Resources/$game_base" "$new_app"
}

adjust_identifier () {
    printf "%s\n" "$1" | tr '[:upper:]' '[:lower:]' | tr ' ' _
}

relpath () {
    python -c "import os, sys; print(os.path.relpath(*sys.argv[1:]))" "$@"
}


scriptdir="$(cd "$(dirname "$0")" && pwd)"
PATH="$scriptdir:$PATH:/usr/libexec"

process_arguments "$@"

printf 'Game: %s\n' "$game"
printf 'Game dir: %s\n' "$game_dir"

if [ -z "$game_type" ]; then
    game_type="$(game_type_from_dir "$game_dir")"
    if [ -z "$game_type" ]; then
        echo >&2 "Error: unknown game type for $game, please specify"
        exit 3
    fi
fi
printf 'Game type: %s\n' "$game_type"

if [ -z "$new_game" ]; then
    new_game="$game"
    if [ $wrapper_mode != move ]; then
        new_game="$(basename "${new_game%.app}") Native.app"
    fi
fi

printf 'New Game Path: %s\n' "$new_game"

if [ -e "$new_game" ]; then
    if [ $wrapper_mode != move ]; then
        echo >&2 "Error: $new_game already exists, aborting"
        exit 1
    fi
fi

if [ $dry_run -eq 1 ]; then
    exit 0
fi

tmp="$(mktemp -d "${0##*/}.XXXXXX")"
trap 'if [ ! -e "$game" ] && [ -e "$tmp_game/Contents/Resources/$game_base" ]; then mv "$tmp_game/Contents/Resources/$game_base" "$game"; fi; rm -rf "$tmp"' EXIT INT TERM
tmp_game="$tmp/$new_game"

shift $#
if [ -n "$scummvm_game_id" ]; then
    game_type=scummvm
    set -- -i "$scummvm_game_id"
fi

create_wrapper "$tmp_game" "$@"
if [ ! -e "$tmp_game/Game" ] && [ ! -L "$tmp_game/Game" ]; then
    ln -s "Contents/Resources/$game_base/$(relpath "$game_dir" "$game")" "$tmp_game/Game"
fi
if [ -e "$tmp_game/finalize_wrapper" ]; then
    evalf '"%s/finalize_wrapper"' "$tmp_game"
fi
create_extra_app_wrappers "$tmp_game"
if [ -e "$new_game" ]; then
    echo >&2 "Error: $new_game still exists?"
    exit 5
fi
mv "$tmp_game" "$new_game"
rmdir "$tmp"
printf >&2 'Created `%s`\n' "$new_game"
