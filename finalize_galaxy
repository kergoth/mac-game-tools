#!/bin/sh
# - Link 'Game' to the game install directory
# - Create support links
# - Set icon from the galaxy or game icon
# - If Galaxy, create extra launchers for other playTasks (i.e. Settings)
# - Change the program name & path, and flags, to set up this game to launch
# - Link docs from the game into Extras
# - If galaxy, rename the app to match the name from the info file

usage () {
    echo >&2 "Usage: ${0##*/} GAME_APP [[GAME_APP]..]"
    exit 2
}

die () {
    printf >&2 'Error: %s\n' "$1"
    exit "${2:-1}"
}

jq_value () {
    jq "$@" | sed 's,^",,; s,"$,,'
}

largest_file () {
    find "$1" -type f -name "$2" -print0 | xargs -0 stat -f '%z%t%N' | sort -rn | head -n 1 | cut -d"	" -f2-
}

plist_set () {
    if ! pb -c "Print '$(pb_escape_value "$1")'" "$3" >/dev/null 2>&1; then
        pb -c "Add '$(pb_escape_value "$1")' '${4:-string}' '$(pb_escape_value "$2")'" "$3"
    else
        pb -c "Set '$(pb_escape_value "$1")' '$(pb_escape_value "$2")'" "$3"
    fi
}

pb () {
    /usr/libexec/PlistBuddy "$@"
}

pb_escape_value () {
    printf "%s" "$1" | sed "s/'/\\\\'/g"
}

new_webloc () {
    rm -f "$2"
    /usr/libexec/PlistBuddy -c "Add URL string \"$1\"" -x "$2"
}

create_extras () {
    infofile="$1"
    gamedir="$2"
    outdir="$3"
    jq <"$infofile" '.supportTasks + .playTasks | .[] | select(.type == "URLTask") | .name + "|" + .link' | sed 's,^",,; s,"$,,' | \
        while IFS="|" read name url; do
            new_webloc "$url" "$outdir/$name.webloc"
        done
    jq <"$infofile" '.supportTasks + .playTasks | .[] | select(.isPrimary != true) | select(.type == "FileTask") | .path ' | sed 's,^",,; s,"$,,' | grep -Eiv '\.(exe|bat)$' | \
        while read path; do
            ln -svf "../$gamedir/$(echo "$path" | tr "\\" "/")" "$outdir"
        done
}

create_wineskin_customexes () {
    infofile="$1"
    gamedir="$2"
    gameapp="$3"
    jq <"$infofile" '.playTasks[] | select(.isPrimary != true) | select(.type == "FileTask") | .name + "|" + .arguments + "|" + .path ' | sed 's,^",,; s,"$,,' | grep -Ei '\.(exe|bat)$' | \
        while IFS="|" read name arguments path; do
            create_customexe "$name" "$gamedir/$path" "$arguments" "$gameapp"
        done
}

create_customexe () {
    exename="$1"
    programpath="$2"
    programargs="$3"
    gameapp="$4"
    customexe="$gameapp/$exename.app"

    rm -rf "$customexe"
    cp -a "$gameapp/Wineskin.app/Contents/Resources/CustomEXE.app" "$customexe"

    wine_programpath="${programpath#drive_c/}"
    plist_set "Program Name and Path" "$wine_programpath" "$customexe/Contents/Info.plist.cexe"
    plist_set "Program Flags" "$programargs" "$customexe/Contents/Info.plist.cexe"

    mkdir -p "$customexe/Icons"
    wrestool -x -t14 -o "$customexe/Icons" "$gameapp/$programpath" 2>/dev/null || true
    customexe_icon="$(largest_file "$customexe/Icons" "*.ico")"
    if [ -n "$customexe_icon" ]; then
        configure_icon "$customexe_icon" "$customexe"
    fi
    rm -rf "$customexe/Icons"

    echo >&2 "Created $customexe"
}

configure_icon () {
    icon_file="$1"
    icon_gamedest="$2"
    icondest="$(/usr/libexec/PlistBuddy -c "Print :CFBundleIconFile" "$icon_gamedest/Contents/Info.plist")"
    makeicns -in "$icon_file" -out "$icon_gamedest/Contents/Resources/$icondest"
    sips -i "$icon_gamedest/Contents/Resources/$icondest"
}


scriptdir="$(cd "$(dirname "$0")" && pwd -P)"
PATH="$scriptdir:$PATH"

if [ $# -eq 0 ]; then
    usage
fi

topdir="$PWD"
for game; do
    if [ ! -d "$game" ]; then
        die "$game does not exist or is not a directory" 1
    fi

    game="$(cd "$game" && pwd)"
    cd "$game" || exit 3

    gamedir="$(get-gamedir "$game")"
    if [ -z "$gamedir" ]; then
        echo >&2 "Error: game install directory not found"
        exit 3
    fi
    rm -f Game
    ln -sv "$gamedir" Game
    mkdir -p Extras

    if [ $(find "$(cd "$gamedir" && pwd -P)" -maxdepth 1 -iname goggame-\*.info | wc -l) -eq 0 ]; then
        die "No goggame-*.info found in the game directory '$gamedir'" 4
    fi

    game_id="$(jq -rs 'map(select(.gameId == .rootGameId)) | .[0].gameId' "$gamedir"/goggame-*.info)"
    infofile="$gamedir/goggame-$game_id.info"

    icon="${infofile%.info}.ico"
    configure_icon "$icon" .

    create_extras "$infofile" "$gamedir" Extras
    rmdir Extras 2>/dev/null || true

    create_wineskin_customexes "$infofile" "$gamedir" .

    name="$(jq -r '.name' "$infofile" | sed 's,   *, ,g')"
    if [ -n "$name" ]; then
        plist_set CFBundleName "$name" Contents/Info.plist
        plist_set CFBundleDisplayName "$name" Contents/Info.plist
        new_game="${game%/*}/$(echo "$name" | tr -d :/).app"
        if [ "$game" != "$new_game" ]; then
            if [ -e "$new_game" ]; then
                echo >&2 "Error: unable to rename '%s' to '%s', as the latter already exists"
            else
                mv -v "$game" "$new_game"
                printf >&2 "Renamed game from '%s' to '%s'\n" "$game" "$new_game"
                game="$new_game"
            fi
        fi
    fi

    wine_gamedir="/${gamedir#drive_c/}"
    plist_set "Program Name and Path" "/Program Files/GOG Galaxy/GalaxyClient.exe" Contents/Info.plist
    plist_set "Program Flags" "/command=runGame /gameId=$game_id /path=\\\"$(echo "c:$wine_gamedir" | sed 's,/,\\\\,g')\\\"" Contents/Info.plist

    cd "$topdir" 2>/dev/null || break
done
exit 0
