#!/bin/bash
#
# TODO: obey goggame-*.info for the dosbox launcher configurations

set -euo pipefail

usage () {
    cat <<END >&2
Usage: ${0##*/} [options] GAME_DIR [GAMEBOX]

Options:

  -n    No copy. This disables copying the game dir into the gamebox.
  -f    Force. Removes an existing gamebox.
END
    exit 1
}

process_arguments () {
    no_copy=0
    force=0

    while getopts nfh opt; do
        case "$opt" in
            n)
                no_copy=1
                ;;
            f)
                force=1
                ;;
            h|\?)
                usage
                ;;
        esac
    done
    shift $((OPTIND - 1))

    if [ $# -eq 0 ] || [ $# -gt 2 ]; then
        echo >&2 "Error: incorrect number of arguments"
        usage
    fi

    gamedir="$(cd "$1" && pwd)"
    if [ $# -gt 1 ]; then
        destdir="${2%.boxer}.boxer"
    else
        destdir="${gamedir##*/}.boxer"
    fi
    game_name="${destdir%.boxer}"
    game_name="${game_name##*/}"
}

boxer_identifier_prefix=com.kergoth.boxer
configure_boxer () {
    local boxer="$1"
    local game_dir="$2"
    identifier="$boxer_identifier_prefix.$(basename "${boxer%.boxer}")"

    plist_add BXGameIdentifier "$identifier" "$boxer/Game Info.plist"
    pb -c "Add BXGameIdentifierType integer 3" "$boxer/Game Info.plist"
    pb -c "Add BXLaunchers array" "$boxer/Game Info.plist"
    >"$boxer/DOSBox Preferences.conf"

    # If there's one dosbox*.conf, use it.
    # If there's multiple with autoexec directives, create bxlauncher
    # configurations for each.
    # If there's multiple and one is _single.conf, make it default
    # If there's one dosbox .conf without autoexec, concatenate it to the
    # others, as it has the generic configuration
    find "$game_dir/" -iname dosbox\*.conf >"$boxer.dosboxes"
    if [ $(wc -l <"$boxer.dosboxes") -eq 0 ]; then
        return
    elif [ $(wc -l <"$boxer.dosboxes") -eq 0 ]; then
        echo >&2 "One dosbox configuration found, using it"
    fi

    cat <<END >"$boxer/exec.sed"
/^\[autoexec\]/{
:s
n
/^mount C/b s
p
b s
}
END

    no_autoexecs=
    autoexecs=
    while read conf; do
        conf="${conf#$game_dir/}"
        conf="${conf#/}"
        if grep -q '^\[autoexec\]' "$game_dir/$conf"; then
            autoexecs="$autoexecs $conf"
            echo >&2 "Autoexec conf: $conf"
        else
            no_autoexecs="$no_autoexecs $conf"
            echo >&2 "No autoexec conf: $conf"
        fi
    done <"$boxer.dosboxes"
    rm -f "$boxer.dosboxes"

    if [ -n "$no_autoexecs" ]; then
        for noauto in $no_autoexecs; do
            cat "$game_dir/$noauto" >>"$boxer/DOSBox Preferences.conf"
        done
    fi

    prefix="$(common_prefix $autoexecs)"
    count=0
    for autoexec_conf in $autoexecs; do
        if [ $(echo $autoexecs | wc -w) -eq 1 ]; then
            name=
            launch="bxlaunch.bat"
            title="$game_name"
        else
            name="$autoexec_conf"
            if [ -n "$prefix" ]; then
                name="${name#$prefix}"
            fi
            name="${name##*/}"
            name="${name%.conf}"
            name="${name#dosbox}"
            name="${name#_}"
            launch="bxlaunch_$name.bat"
            title="$game_name ($name)"
        fi

        sed -ne '/^\[autoexec\]/q; p' "$game_dir/$autoexec_conf" >>"$boxer/DOSBox Preferences.conf"

        pb -c "Add BXLaunchers:$count dict" "$boxer/Game Info.plist"
        plist_add "BXLaunchers:$count:BXLauncherPath" "C.harddisk/$launch" "$boxer/Game Info.plist"
        plist_add "BXLaunchers:$count:BXLauncherTitle" "$title" "$boxer/Game Info.plist"

        conf_dir="$(dirname "$autoexec_conf")"
        >"$game_dir/$launch"
        if [ -n "$conf_dir" ] && [ "$conf_dir" != . ]; then
            echo "cd $conf_dir" >>"$game_dir/$launch"
        fi
        LC_ALL=C sed -n -f "$boxer/exec.sed" "$game_dir/$autoexec_conf" >>"$boxer/$launch"

        count="$((count + 1))"
    done
    plist_add BXDefaultProgramPath "C.harddisk/$launch" "$boxer/Game Info.plist"

    if [ $no_copy -eq 1 ]; then
        cat <<END >"$boxer/finalize"
#!/bin/sh
scriptdir="\$(dirname "\$0")"
if [ -d "\$scriptdir/C.harddisk" ]; then
    mv -v "\$scriptdir/"bxlaunch*.bat "\$scriptdir/C.harddisk" && rm -f "\$0"
fi
END
        chmod +x "$boxer/finalize"
    else
        mv "$boxer/"bxlaunch* "$boxer/C.harddisk/"
    fi
    rm -f "$boxer/exec.sed"
}

setup_boxer_icon () {
    local boxer="$1"
    local installdest="$2"
    local icon

    goggame="$(find "$installdest" -iname goggame-\*.ico -maxdepth 1 | head -n 1)"
    if [ -n "$goggame" ]; then
        icon="$goggame"
    else
        gfw_high="$(find "$installdest" -iname gfw_high.ico -maxdepth 1 | head -n 1)"
        if [ -n "$gfw_high" ]; then
            icon="$gfw_high"
        fi
    fi
    if [ -n "$icon" ]; then
        makeicns -in "$icon" -out "$boxer/game.icns"
        "$scriptdir/copymacicon" "$boxer/game.icns" "$boxer"
        return
    fi

    mkdir -p "$boxer/Icons"
    cp -a "$scriptdir/copymacicon" "$boxer/Icons"
    find "$installdest/" -iname \*.ico | while read ico; do
        cp "$ico" "$boxer/Icons/$(basename "$ico" | tr '[:upper:]' '[:lower:]')"
    done

    find "$installdest/" -iname \*.exe -print0 | \
        xargs -0 wrestool -x -t14 -o "$boxer/Icons" 2>/dev/null || true

    rmdir "$boxer/Icons" 2>/dev/null || true

    if [ -d "$boxer/Icons" ]; then
        cat >"$boxer/Icons/finish" <<END
#!/bin/sh

scriptdir="\$(cd "\$(dirname "\$0")" && pwd)"
cd "\$scriptdir"
if ls *.icns &>/dev/null; then
    icns="\$(ls *.icns | head -n 1)"
    cp "\$icns" "\$scriptdir/../game.icns"
    ./copymacicon "\$icns" "\$scriptdir/.."
    rm -rf "\$scriptdir"
fi
END
        echo "Convert your preferred icon from .ico to .icns and run 'finish'." >"$boxer/Icons/README.TXT"
        chmod +x "$boxer/Icons/finish"
        open "$boxer/Icons"
    fi
}

setup_boxer_docs () {
    local boxer="$1"
    local gamedir="$2"
    find "$gamedir" -iname \*.pdf -o -iname \*.txt -o -iname \*.doc \
                    -iname \*.rtf -o -iname \*.htm -o -iname \*.html \
                    -maxdepth 1 | { grep -vi license || true; } | \
        while read -r doc; do
            doc="${doc#$gamedir/}"
            ln -sf "../C.harddisk/$doc" "$boxer/Documentation/$doc"
        done
}

common_prefix () {
    python -c "import os, sys; print(os.path.commonprefix(sys.argv[1:]))" "$@"
}

plist_add () {
    pb -c "Add '$(pb_escape_value "$1")' '${4:-string}' '$(pb_escape_value "$2")'" "$3"
}

pb () {
    /usr/libexec/PlistBuddy "$@"
}

pb_escape_value () {
    printf "%s" "$1" | sed "s/'/\\\\'/g"
}


scriptdir="$(dirname "$0")"
process_arguments "$@"

if [ -e "$destdir" ]; then
    if [ $force -eq 1 ]; then
        rm -rf "$destdir"
    else
        echo >&2 "Error: $destdir already exists, aborting"
        exit 2
    fi
fi

tmp="$(mktemp -d "$(dirname "$destdir")/${0##*/}.XXXXXX")"
trap 'rm -rf "$tmp"' EXIT INT TERM

mkdir -p "$tmp/Documentation"
if [ $no_copy -eq 0 ]; then
    cp -a "$gamedir" "$tmp/C.harddisk"
fi
configure_boxer "$tmp" "$gamedir"
setup_boxer_icon "$tmp" "$gamedir"
setup_boxer_docs "$tmp" "$gamedir"
mv "$tmp" "$destdir"
echo >&2 "Created '$destdir'"
